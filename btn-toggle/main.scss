@use "sass:math";

// Functions
@function calculate-aspect-ratio($width, $height) {
  @return math.div($width, $height);
}

// Mixins
@mixin neumorph-shadow-inset($light, $dark, $outline) {
  box-shadow: 
    inset -5px -5px 9px $light, 
    inset 5px 5px 9px $dark,
    -1px -1px 1px $outline inset, 
    1px 1px 1px $outline inset;
}

@mixin neumorph-shadow-outset($light, $dark, $outline) {
  box-shadow: 
    -5px -5px 9px $light, 
    5px 5px 9px $dark,
    -1px -1px 1px $outline inset, 
    1px 1px 1px $outline inset;
}

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

// Variables SCSS
$toggle-aspect-ratio: calculate-aspect-ratio(2, 1);

// Variables CSS
:root {
  --background-color: #dde1e7;
  --text-color: #333;
  --toggle-background: #d2d8e3;
  --toggle-ball: #e6ebf1;
  --shadow-dark: rgba(176, 184, 199, 0.74);
  --shadow-light: rgba(245, 250, 253, 0.34);
  --shadow-light-outline: rgba(239, 249, 255, 0.85);
  --transition-duration: 0.3s;
  --transition-timing: ease-in-out;
}

* {
  box-sizing: border-box;
}

body {
  background-color: var(--background-color);
  color: var(--text-color);
  font-family: 'Arial', sans-serif;
  @include flex-center;
  height: 100vh;
  margin: 0;
}

.transitions-enabled {
  transition: 
    background-color var(--transition-duration) var(--transition-timing),
    color var(--transition-duration) var(--transition-timing);
}

.toggle {
  &-container {
    width: 100%;
    max-width: 300px;
    aspect-ratio: $toggle-aspect-ratio;
  }

  &-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
  }

  &-label {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--toggle-background);
    border-radius: 150px;
    cursor: pointer;
    @include neumorph-shadow-inset(
      var(--shadow-light),
      var(--shadow-dark),
      var(--shadow-light-outline)
    );
    transition: all var(--transition-duration) var(--transition-timing);

    &:focus-within {
      outline: 2px solid var(--text-color);
      outline-offset: 2px;
    }
  }

  &-ball {
    position: absolute;
    top: 10%;
    left: 5%;
    width: 40%;
    height: 80%;
    background: var(--toggle-ball);
    border-radius: 50%;
    @include neumorph-shadow-outset(
      var(--shadow-light),
      var(--shadow-dark),
      var(--shadow-light-outline)
    );
    transition: 
      transform var(--transition-duration) var(--transition-timing),
      background var(--transition-duration) var(--transition-timing),
      box-shadow var(--transition-duration) var(--transition-timing);
    will-change: transform;
  }
}

#toggle {
  display: none;

  &:checked + .toggle-label .toggle-ball {
    transform: translateX(calc(125% - 5%));
  }
}

.dark-mode {
  --background-color: #27272b;
  --text-color: #f0f0f3;
  --toggle-background: #1f1f22;
  --toggle-ball: #2c2c31;
  --shadow-light: rgba(0, 0, 0, 0.7);
  --shadow-dark: rgba(20, 18, 18, 0.1);
  --shadow-light-outline: rgba(55, 63, 69, 0.85);
}

// Media queries
$breakpoints: (
  xl: 1200px,
  lg: 992px,
  md: 768px,
  sm: 576px
);

@each $breakpoint, $value in $breakpoints {
  @media (max-width: $value) {
    .toggle-container {
      max-width: if($breakpoint == xl, 250px,
                 if($breakpoint == lg, 220px,
                 if($breakpoint == md, 200px, 180px)));
    }
  }
}

.small-context .toggle-container {
  max-width: 150px;
}

@media (prefers-reduced-motion: reduce) {
  * {
    transition-duration: 0.15s !important;
  }
}